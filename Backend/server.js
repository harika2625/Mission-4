require("dotenv").config();
const express = require("express");
const cors = require("cors");

PORT = 3000;

const app = express();
app.use(cors());
app.use(express.json());

// ---- Google Generative AI ----
const { GoogleGenerativeAI } = require("@google/generative-ai");

const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-lite",
  systemInstruction: `
You are Tina, an insurance consultant. Help users choose the right insurance policy.

- If this is the start of the conversation, introduce yourself and ask: 
  "Iâ€™m Tina. I help you to choose the right insurance policy. May I ask you a few personal questions to make sure I recommend the best policy for you?".
- Do not repeat the greeting after the first message.
- Only ask further questions if the user agrees.
-If users not agrees to answer personal questions,close the chat in positive way
- Do not ask for specific insurance products directly.
- Instead, ask relevant questions like "Do you need coverage for your own car or just third-party?".
- Recommend one or more of the following insurance products at the end:
  - **Mechanical Breakdown Insurance (MBI)**: Covers mechanical failures. Not available for trucks or racing cars.
  - **Comprehensive Car Insurance**: Covers damage to your vehicle and third-party damage. Only available for vehicles less than 10 years old.
  - **Third Party Car Insurance**: Covers damage to third-party vehicles.
- Always explain the reason for your recommendations.
  `,
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};
app.post("/InsuranceAgent", async (req, res) => {
  /** Read the request data. */
  const chatHistory = req.body.history || [];
  const msg = req.body.chat;

  console.log("User input", msg); //log the user chat input

  /** Initialize the chat with the chat history */
  const fullChat = [
    ...chatHistory, // Add the chat history to the chat
    { role: "user", parts: [{ text: msg }] },
  ];

  const result = await model.generateContent({
    contents: fullChat,
    generationConfig,
  });

  /** Send the message posted by the user to the Gemini model and read the response generated by the model.*/

  const response = await result.response;
  const text = await response.text();

  /** Send the response returned by the model as the API's response. */
  res.send({ text: text });

  console.log(text);
});

app.get("/", (req, res) => {
  res.send("Hello, World!");
});

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
